from django import forms
from django.db import models
from .models import Run, InputFile, OutputFile

from django.core.validators import MaxValueValidator, MinValueValidator

class RunForm(forms.ModelForm):
    method = forms.ChoiceField(choices=(('bowtie', 'Bowtie'), ('blast', 'BLAST'), ('aho-corasick', 'Aho-Corasick')), label = "Method", help_text = "The background method used to align primers and probes to the uploaded contigs. See the help section to decide what method to use.")
    crossCheck = forms.BooleanField(label = "Cross-check primer packages", required = False, help_text = "If checked, amplicons can be formed by primers coming from different primer packages. Also probes from non-matching packages can hybridize to these amplicons. Please also see the help section.")
    dimerCheck = forms.BooleanField(label = "Secondary structure check", required = False, help_text = "If checked, performs a cross-dimer, self-dimer (primers) and hairpin (primers, probes) check for uploaded primer packages. Please also see the help section.")
    checkProbesOnly = forms.BooleanField(label = "Check probes only", required = False, help_text = "If checked, primers are ignored and only probes are mapped to the contigs. Please also see the help section.")
    runID = forms.IntegerField(required=True, widget=forms.HiddenInput())
    productLength = forms.IntegerField(validators = [MinValueValidator(50), MaxValueValidator(20000)], label = "Product length (bp)", initial = 1000, help_text = "Maxmimum permissible amplicon length generated by 2 primers")
    primerMismatchesTotal = forms.IntegerField(validators = [MinValueValidator(0), MaxValueValidator(3)], label = "Primer mismatches", initial = 0, help_text = "The maximum number of allowed mismatches in a primer")
    probeMismatchesTotal = forms.IntegerField(validators = [MinValueValidator(0), MaxValueValidator(3)], label = "Probe mismatches", initial = 0, help_text = "The maximum number of allowed mismatches in a probe")
    primerMonovalentCations = forms.FloatField(validators = [MinValueValidator(0.01), MaxValueValidator(1000)], label = "Monovalent cations (mM)", initial = 50, help_text = "Monovalent cation concentration in the PCR (used for secondary structure check if enabled)")
    primerDivalentCations = forms.FloatField(validators = [MinValueValidator(0), MaxValueValidator(1000)], label = "Divalent cations (mM)", initial = 1.5, help_text = "Divalent cation concentration in the PCR (used for secondary structure check if enabled)")
    probeMonovalentCations = forms.FloatField(validators = [MinValueValidator(0.01), MaxValueValidator(1000)], label = "Monovalent cations (mM)", initial = 25, help_text = "Monovalent cation concentration in the hybridization reaction (used for secondary structure check if enabled)")
    probeDivalentCations = forms.FloatField(validators = [MinValueValidator(0), MaxValueValidator(1000)], label = "Divalent cations (mM)", initial = 10, help_text = "Divalent cation concentration in the hybridization reaction (used for secondary structure check if enabled)")
    primerDNTPs = forms.FloatField(validators = [MinValueValidator(0), MaxValueValidator(1000)], label = "dNTPs (mM)", initial = 1.75, help_text = "dNTP concentration in the PCR (used for secondary structure check if enabled)")
    probeDNTPs = forms.FloatField(validators = [MinValueValidator(0), MaxValueValidator(1000)], label = "dNTPs (mM)", initial = 0, help_text = "dNTP concentration in the hybridization reaction (used for secondary structure check if enabled)")
    primerConcentration = forms.FloatField(validators = [MinValueValidator(0), MaxValueValidator(1500)], label = "Annealing oligo concentration (nM)", initial = 300, help_text = "The annealing oligo concentration in the PCR as used by Primer3 (used for secondary structure check if enabled)")
    probeConcentration = forms.FloatField(validators = [MinValueValidator(0), MaxValueValidator(1500)], label = "DNA concentration (nM)", initial = 50, help_text = "The DNA concentration in the hybridization reaction as used by Primer3 (used for secondary structure check if enabled)")
    primerAnnealingTemp = forms.FloatField(validators = [MinValueValidator(5), MaxValueValidator(95)], label = "Primer annealing temperature (°C)", initial = 55, help_text = "The primer annealing temperature is used to calculate the hairpin, cross- and self-dimer formation.")
    probeAnnealingTemp = forms.FloatField(validators = [MinValueValidator(5), MaxValueValidator(95)], label = "Probe annealing temperature (°C)", initial = 70, help_text = "The probe annealing temperature is used to calculate the hairpin, cross- and self-dimer formation.")
    email = forms.EmailField(label = "Notification email", required = False, help_text = "We recommend to enter an email address to easily retrieve your job")
    dbs = forms.MultipleChoiceField(choices = (("Axolotl_ASM291563v2", "Ambystoma mexicanum (ASM291563v2)"), ("A_thaliana_TAIR10.1", "Arabidopsis thaliana (TAIR10.1)"), ("C_elegans_WBcel235", "Caenorhabditis elegans (WBcel235)"), ("Dog_CanFam3.1", "Canis lupus familiaris (CanFam3.1)"), ("Guinea_pig_Cavpor3.0", "Cavia porcellus (Cavpor3.0)"), ("Hamster_CriGri_1.0", "Cricetulus griseus (CriGri_1.0)"), ("Zebrafish_GRCz11", "Danio rerio (GRCz11)"), ("D_melanogaster_R6_plus_ISO1_MT", "Drosophila melanogaster (Release 6 plus ISO1 MT)"), ("Cat_Felis_catus_9.0", "Felis catus (Felis_catus_9.0)"), ("Chicken_GRCg6a", "Gallus gallus (GRCg6a)"), ("Naked_mole-rat_HetGla_female_1.0", "Heterocephalus glaber (HetGla_female_1.0)"), ("Human_GRCh38.p12", "Homo sapiens (GRCh38.p12)"), ("Human_GRCh38.p13", "Homo sapiens (GRCh38.p13)"), ("Human_GRCh37.p13", "Homo sapiens (GRCh37.p13)"), ("Rhesus_macaque_Mmul_8.0.1", "Macaca mulatta (Mmul_8.0.1)"), ("Mouse_GRCm38.p6", "Mus musculus (GRCm38.p6)"), ("Rabbit_OryCun2.0", "Oryctolagus cuniculus (OryCun2.0)"), ("Rice_Build_4.0", "Oryza sativa (Build_4.0)"), ("Sheep_Oar_rambouillet_v1.0", "Ovis aries (Oar_rambouillet_v1.0)"), ("Chimpanzee_Clint_PTRv2", "Pan troglodytes (Clint_PTRv2)"), ("Rat_Rnor_6.0", "Rattus norvegicus (Rnor_6.0)"), ("Yeast_R64", "Saccharomyces cerevisiae S288C (R64)"), ("Pig_Sscrofa11.1", "Sus scrofa (Sscrofa11.1)"), ("Maize_B73_RefGen_v4", "Zea mays (B73_RefGen_v4)"), ("A_thaliana_TAIR10.1_RNA", "Arabidopsis thaliana (transcriptome)"), ("C_elegans_WBcel235_RNA", "Caenorhabditis elegans (transcriptome)"), ("Hamster_CriGri_1.0_RNA", "Cricetulus griseus (transcriptome)"), ("Zebrafish_GRCz11_RNA", "Danio rerio (transcriptome)"), ("D_melanogaster_R6_plus_ISO1_MT_RNA", "Drosophila melanogaster (transcriptome)"), ("Naked_mole-rat_HetGla_female_1.0_RNA", "Heterocephalus glaber (transcriptome)"), ("Human_GRCh38.p12_RNA", "Homo sapiens (GRCh38.p12 transcriptome)"), ("Human_GRCh37.p13_RNA", "Homo sapiens (GRCh37.p13 transcriptome)"), ("Mouse_GRCm38.p6_RNA", "Mus musculus (GRCm38.p6 transcriptome)"), ("Yeast_R64_RNA", "Saccharomyces cerevisiae S288C (transcriptome)"), ), required = False, label = "Pre-built databases", help_text = "These databases are stored on our server and can be used without uploading huge files. Transcriptomes are available at the end of the list.")
    class Meta:
        model = Run
        fields = [
                'primerMismatchesTotal', 'primerAnnealingTemp', 'productLength', 'primerMonovalentCations', 'primerDivalentCations', 'primerDNTPs', 'primerConcentration',
                'probeMismatchesTotal', 'probeAnnealingTemp', 'probeMonovalentCations', 'probeDivalentCations', 'probeDNTPs', 'probeConcentration',
                'method', 'crossCheck', 'checkProbesOnly', 'dimerCheck', 'email', 'runID'
                ]

class ARVIForm(forms.ModelForm):
    runID = forms.IntegerField(required=True, widget=forms.HiddenInput())
    primerMismatchesTotal = forms.IntegerField(validators = [MinValueValidator(0), MaxValueValidator(1)], label = "Primer mismatches", initial = 0, help_text = "The maximum number of allowed mismatches in a primer")
    probeMismatchesTotal = forms.IntegerField(validators = [MinValueValidator(0), MaxValueValidator(1)], label = "Probe mismatches", initial = 0, help_text = "The maximum number of allowed mismatches in a probe")
    email = forms.EmailField(label = "Notification email", required = False, help_text = "We recommend to enter an email address to easily retrieve your job")
    class Meta:
        model = Run
        fields = [
                'primerMismatchesTotal', 
                'probeMismatchesTotal',
                'email',
                'runID'
                ]

class InputFileForm(forms.ModelForm):
    seqtype = forms.CharField(widget=forms.HiddenInput(), initial="")
    tmpRunID = forms.IntegerField(required=True, widget=forms.HiddenInput())
    class Meta:
        model = InputFile
        fields = ('document', 'seqtype', 'tmpRunID')

class OutputFileForm(forms.ModelForm):
    runid = forms.IntegerField(required=True, widget=forms.HiddenInput())
    results_dimer = forms.FileField(required=False)
    class Meta:
        model = OutputFile
        fields = ('hits', 'results_all', 'results_wob', 'results_dimer')

